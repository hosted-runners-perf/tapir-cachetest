name: CI

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"

jobs:
  ci:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala-version: [ "3" ]
        target-platform: [ "JVM", "JS", "Native" ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        cache: 'sbt'
        java-version: 11
    - name: Install sam cli
      run: |
        wget -q https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
        unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation
        sudo ./sam-installation/install --update
        sam --version
    - name: Install libidn2-dev libcurl3-dev
      if: matrix.target-platform == 'Native'
      run: |
        sudo apt-get update
        sudo apt-get install libidn2-dev libcurl3-dev
        echo "STTP_NATIVE=1" >> $GITHUB_ENV
    - name: Compile
      run: sbt -v "compileScoped ${{ matrix.scala-version }} ${{ matrix.target-platform }}"
    - name: Compile documentation
      if: matrix.target-platform == 'JVM'
      run: sbt -v compileDocumentation
    - name: Test
      if: matrix.target-platform != 'JS'
      run: sbt -v "testScoped ${{ matrix.scala-version }} ${{ matrix.target-platform }}"
    # The finatra tests take a really long time (1/3 of the build duration); hence, they are disabled and need to be run separately
    #- name: Test finatra
    #  if: matrix.target-platform != 'JS'
    #  run: sbt -v testFinatra
    # Temporarily call JS tests for each subproject explicitly as a workaround until
    # https://github.com/scala-js/scala-js/issues/4317 has a solution
    - name: Test
      if: matrix.target-platform == 'JS' && matrix.scala-version == '2.12'
      run: sbt catsJS2_12/test circeJsonJS2_12/test clientCoreJS2_12/test clientTestsJS2_12/test coreJS2_12/test enumeratumJS2_12/test jsoniterScalaJS2_12/test newtypeJS2_12/test openapiDocsJS2_12/test playJsonJS2_12/test redocJS2_12/test serverCoreJS2_12/test sttpClientJS2_12/test testingJS2_12/test testsJS2_12/test uPickleJsonJS2_12/test zio1JsonJS2_12/test zioJsonJS2_12/test
    - name: Test
      if: matrix.target-platform == 'JS' && matrix.scala-version == '2.13'
      run: sbt catsJS/test circeJsonJS/test clientCoreJS/test clientTestsJS/test coreJS/test enumeratumJS/test jsoniterScalaJS/test newtypeJS/test openapiDocsJS/test playJsonJS/test redocJS/test serverCoreJS/test sttpClientJS/test testingJS/test testsJS/test uPickleJsonJS/test zio1JsonJS/test zioJsonJS/test
    - name: Test
      if: matrix.target-platform == 'JS' && matrix.scala-version == '3'
      run: sbt catsJS3/test circeJsonJS3/test clientCoreJS3/test clientTestsJS3/test coreJS3/test jsoniterScalaJS3/test openapiDocsJS3/test redocJS3/test serverCoreJS3/test sttpClientJS3/test testingJS3/test testsJS3/test uPickleJsonJS3/test zioJsonJS3/test

  mima:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # checkout tags so that dynver works properly (we need the version for MiMa)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'sbt'
      - name: Check MiMa
        run: sbt -v mimaReportBinaryIssues